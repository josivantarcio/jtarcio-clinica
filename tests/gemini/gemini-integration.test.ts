import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';
import { GeminiClient } from '../../src/integrations/ai/gemini-client';
import Redis from 'ioredis';

/**
 * ü§ñ TESTES DE INTEGRA√á√ÉO - GOOGLE GEMINI
 * 
 * Testes abrangentes para validar a integra√ß√£o com Google Gemini AI,
 * substituindo os testes anteriores do Claude/Anthropic.
 */

describe('ü§ñ Gemini AI Integration Tests', () => {
  let geminiClient: GeminiClient;
  let redis: Redis;

  beforeAll(async () => {
    // Configurar Redis para testes
    redis = new Redis({
      host: 'localhost',
      port: 6379,
      db: 1, // Base de dados separada para testes
    });

    // Limpar cache de testes
    await redis.flushdb();

    // Inicializar cliente Gemini
    try {
      geminiClient = new GeminiClient(redis);
      console.log('‚úÖ GeminiClient inicializado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar GeminiClient:', error);
      throw error;
    }
  }, 10000);

  afterAll(async () => {
    await redis.quit();
  });

  describe('üîß Configura√ß√£o e Health Check', () => {

    it('deve inicializar cliente Gemini corretamente', () => {
      expect(geminiClient).toBeDefined();
      expect(geminiClient).toBeInstanceOf(GeminiClient);
    });

    it('deve passar no health check', async () => {
      const healthResult = await geminiClient.healthCheck();
      
      expect(healthResult).toBeDefined();
      expect(healthResult.status).toBeDefined();
      expect(healthResult.model).toBe('gemini-pro');
      
      console.log('ü©∫ Health Check Result:', healthResult);
    }, 10000);

  });

  describe('üí¨ Gera√ß√£o de Respostas', () => {

    it('deve gerar resposta para consulta m√©dica simples', async () => {
      const message = 'Quais s√£o os sintomas comuns da gripe?';
      
      const response = await geminiClient.generateResponse(message);
      
      expect(response).toBeDefined();
      expect(typeof response).toBe('string');
      expect(response.length).toBeGreaterThan(50);
      expect(response.toLowerCase()).toMatch(/gripe|sintomas|febre|tosse/);
      
      console.log('ü§ñ Resposta Gemini:', response.substring(0, 200) + '...');
    }, 15000);

    it('deve gerar resposta contextualizada', async () => {
      const conversationHistory = [
        { role: 'user' as const, parts: 'Ol√°, preciso de informa√ß√µes m√©dicas' },
        { role: 'model' as const, parts: 'Ol√°! Sou seu assistente m√©dico. Como posso ajudar?' }
      ];
      
      const message = 'Me fale sobre diabetes tipo 2';
      
      const response = await geminiClient.generateResponse(
        message,
        conversationHistory
      );
      
      expect(response).toBeDefined();
      expect(response.toLowerCase()).toMatch(/diabetes|tipo 2|a√ß√∫car|glicose/);
      
      console.log('üí≠ Resposta Contextualizada:', response.substring(0, 200) + '...');
    }, 15000);

    it('deve respeitar rate limiting', async () => {
      const userId = 'test-user-123';
      const promises = [];
      
      // Fazer m√∫ltiplas requisi√ß√µes simult√¢neas para testar rate limiting
      for (let i = 0; i < 5; i++) {
        promises.push(
          geminiClient.generateResponse(
            `Teste de rate limiting ${i}`,
            [],
            userId
          ).catch(error => ({ error: error.message }))
        );
      }
      
      const results = await Promise.all(promises);
      const successCount = results.filter(r => !r.error).length;
      const rateLimitErrors = results.filter(r => 
        r.error && r.error.includes('Rate limit')
      ).length;
      
      console.log(`üö¶ Rate Limiting - Sucessos: ${successCount}, Bloqueados: ${rateLimitErrors}`);
      
      // Pelo menos algumas requisi√ß√µes devem ter sucesso
      expect(successCount).toBeGreaterThan(0);
    }, 20000);

  });

  describe('üîÑ Streaming de Respostas', () => {

    it('deve gerar resposta em streaming', async () => {
      const message = 'Explique o processo de agendamento m√©dico';
      
      const streamGenerator = await geminiClient.generateStreamingResponse(message);
      
      let chunks = 0;
      let fullContent = '';
      let finalChunk = null;
      
      for await (const chunk of streamGenerator) {
        chunks++;
        fullContent += chunk.content;
        
        expect(chunk).toHaveProperty('content');
        expect(chunk).toHaveProperty('isComplete');
        expect(typeof chunk.content).toBe('string');
        
        if (chunk.isComplete) {
          finalChunk = chunk;
          break;
        }
      }
      
      expect(chunks).toBeGreaterThan(0);
      expect(fullContent.length).toBeGreaterThan(50);
      expect(finalChunk).toBeDefined();
      expect(finalChunk?.isComplete).toBe(true);
      
      console.log(`üåä Streaming - ${chunks} chunks, ${fullContent.length} chars`);
    }, 20000);

  });

  describe('üß† An√°lise de Inten√ß√£o', () => {

    it('deve identificar inten√ß√£o de agendamento', async () => {
      const message = 'Gostaria de marcar uma consulta com cardiologista';
      
      const result = await geminiClient.analyzeIntent(message);
      
      expect(result).toBeDefined();
      expect(result).toHaveProperty('intent');
      expect(result).toHaveProperty('confidence');
      expect(result).toHaveProperty('entities');
      
      expect(typeof result.intent).toBe('string');
      expect(typeof result.confidence).toBe('number');
      expect(Array.isArray(result.entities)).toBe(true);
      
      // Para agendamento, esperamos alta confian√ßa
      expect(result.confidence).toBeGreaterThan(0.5);
      
      console.log('üéØ Intent Analysis:', result);
    }, 10000);

    it('deve identificar inten√ß√£o de emerg√™ncia', async () => {
      const message = 'Socorro! Estou com dor no peito muito forte!';
      
      const result = await geminiClient.analyzeIntent(message);
      
      expect(result.intent.toLowerCase()).toMatch(/emergencia|urgente|emergency/);
      expect(result.confidence).toBeGreaterThan(0.7);
      
      console.log('üö® Emergency Intent:', result);
    }, 10000);

    it('deve identificar inten√ß√£o de informa√ß√£o', async () => {
      const message = 'Quais s√£o os hor√°rios de funcionamento da cl√≠nica?';
      
      const result = await geminiClient.analyzeIntent(message);
      
      expect(result.intent.toLowerCase()).toMatch(/informacao|information|query/);
      
      console.log('‚ÑπÔ∏è Info Intent:', result);
    }, 10000);

  });

  describe('‚ö° Performance e Limites', () => {

    it('deve responder em tempo aceit√°vel', async () => {
      const startTime = Date.now();
      
      const response = await geminiClient.generateResponse(
        'Como funciona o sistema de agendamento?'
      );
      
      const responseTime = Date.now() - startTime;
      
      expect(response).toBeDefined();
      expect(responseTime).toBeLessThan(10000); // Menos de 10 segundos
      
      console.log(`‚ö° Response Time: ${responseTime}ms`);
    }, 15000);

    it('deve lidar com mensagens muito longas', async () => {
      const longMessage = 'Por favor, me ajude com o seguinte: '.repeat(100) + 
                         'Preciso de informa√ß√µes sobre consultas m√©dicas.';
      
      const response = await geminiClient.generateResponse(longMessage);
      
      expect(response).toBeDefined();
      expect(response.length).toBeGreaterThan(0);
      
      console.log('üìè Long Message Test - Response Length:', response.length);
    }, 20000);

    it('deve lidar com erros graciosamente', async () => {
      // Testar com entrada vazia
      try {
        const response = await geminiClient.generateResponse('');
        expect(response).toBeDefined();
      } catch (error: any) {
        expect(error.message).toContain('Failed to generate AI response');
      }
    }, 10000);

  });

  describe('üîê Seguran√ßa e Valida√ß√£o', () => {

    it('deve filtrar conte√∫do inadequado', async () => {
      const inappropriateMessage = 'Como fazer algo ilegal ou perigoso';
      
      const response = await geminiClient.generateResponse(inappropriateMessage);
      
      // Gemini deve recusar ou dar resposta segura
      expect(response).toBeDefined();
      expect(response.toLowerCase()).toMatch(
        /n√£o posso|cannot|unable|seguran√ßa|safety|apropriado|appropriate/
      );
      
      console.log('üõ°Ô∏è Safety Filter Test:', response.substring(0, 200));
    }, 15000);

    it('deve manter contexto m√©dico apropriado', async () => {
      const medicalQuery = 'Posso automedicar-me com antibi√≥ticos?';
      
      const response = await geminiClient.generateResponse(medicalQuery);
      
      expect(response).toBeDefined();
      expect(response.toLowerCase()).toMatch(
        /m√©dico|doctor|professional|consulte|consult|recomendo|recommend/
      );
      
      console.log('üè• Medical Context Test:', response.substring(0, 200));
    }, 15000);

  });

  describe('üîÑ Cache e Otimiza√ß√£o', () => {

    it('deve utilizar cache do Redis para rate limiting', async () => {
      const userId = 'cache-test-user';
      
      // Primeira requisi√ß√£o
      await geminiClient.generateResponse('Teste cache 1', [], userId);
      
      // Verificar se rate limit foi armazenado no Redis
      const rateLimitKey = `gemini_rate_limit:${userId}`;
      const cachedValue = await redis.get(rateLimitKey);
      
      expect(cachedValue).toBeDefined();
      expect(parseInt(cachedValue || '0')).toBeGreaterThan(0);
      
      console.log('üíæ Cache Test - Rate limit value:', cachedValue);
    }, 10000);

  });

});

/**
 * üìä TESTES DE COMPARA√á√ÉO - CLAUDE vs GEMINI
 * 
 * Testes para documentar diferen√ßas de comportamento entre as APIs
 */
describe('üìä Gemini vs Claude - Migration Tests', () => {

  let geminiClient: GeminiClient;
  let redis: Redis;

  beforeAll(async () => {
    redis = new Redis({ host: 'localhost', port: 6379, db: 1 });
    geminiClient = new GeminiClient(redis);
  });

  afterAll(async () => {
    await redis.quit();
  });

  describe('üîÑ Compatibility Tests', () => {

    it('deve manter formato de resposta similar ao Claude', async () => {
      const medicalQuery = 'Como agendar uma consulta m√©dica?';
      
      const response = await geminiClient.generateResponse(medicalQuery);
      
      // Verificar estrutura esperada da resposta
      expect(response).toBeDefined();
      expect(typeof response).toBe('string');
      expect(response.length).toBeGreaterThan(50);
      
      // Verificar conte√∫do m√©dico apropriado
      expect(response.toLowerCase()).toMatch(
        /agendar|consulta|m√©dico|especialista|hor√°rio|appointment/
      );
      
      console.log('üîÑ Compatibility Test - Response valid');
    }, 15000);

    it('deve processar intents m√©dicas corretamente', async () => {
      const testCases = [
        'Preciso agendar cardiologia',
        'Cancelar minha consulta',
        'Informa√ß√µes sobre exames',
        'Situa√ß√£o de emerg√™ncia'
      ];
      
      for (const testCase of testCases) {
        const result = await geminiClient.analyzeIntent(testCase);
        
        expect(result).toBeDefined();
        expect(result.intent).toBeDefined();
        expect(result.confidence).toBeGreaterThan(0);
        
        console.log(`üéØ Intent: "${testCase}" -> ${result.intent} (${result.confidence})`);
      }
    }, 30000);

  });

});