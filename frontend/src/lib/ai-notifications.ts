import { useNotificationsStore } from '@/store/notifications'

/**
 * AI Notification System - EO Cl√≠nica
 * 
 * Este m√≥dulo gerencia notifica√ß√µes para agendamentos realizados pela IA
 * Ser√° integrado com o sistema de chat da IA na pr√≥xima semana
 */

export interface AIBookingData {
  patientName: string
  patientEmail?: string
  doctorName: string
  doctorId: string
  specialtyName: string
  scheduledAt: string
  appointmentId: string
  chatId: string
  confidence: number // 0-1, confian√ßa da IA no agendamento
  context: {
    symptoms?: string[]
    urgency?: 'low' | 'medium' | 'high' | 'urgent'
    patientPreferences?: string[]
    conversationSummary?: string
  }
}

/**
 * Cria um agendamento baseado em dados reais fornecidos pela IA
 * Este m√©todo ser√° usado quando a integra√ß√£o real com o chat da IA for implementada
 */
export function createAIBookingFromRealData(bookingParams: Partial<AIBookingData>): AIBookingData {
  const now = new Date()
  const appointmentId = `ai_apt_${now.getTime()}`
  const chatId = bookingParams.chatId || `chat_${now.getTime()}`
  
  // Generate scheduled time in a more realistic way
  const scheduledDate = new Date(bookingParams.scheduledAt || now)
  const scheduledAt = scheduledDate.toLocaleDateString('pt-BR', {
    weekday: 'long',
    day: 'numeric',
    month: 'long'
  }) + ` √†s ${scheduledDate.getHours().toString().padStart(2, '0')}:${scheduledDate.getMinutes().toString().padStart(2, '0')}`
  
  return {
    patientName: bookingParams.patientName || 'Paciente',
    patientEmail: bookingParams.patientEmail || 'paciente@email.com',
    doctorName: bookingParams.doctorName || 'M√©dico',
    doctorId: bookingParams.doctorId || `dr_${now.getTime()}`,
    specialtyName: bookingParams.specialtyName || 'Consulta Geral',
    scheduledAt,
    appointmentId,
    chatId,
    confidence: bookingParams.confidence || 0.90,
    context: {
      symptoms: bookingParams.context?.symptoms || [],
      urgency: bookingParams.context?.urgency || 'medium',
      patientPreferences: bookingParams.context?.patientPreferences || [],
      conversationSummary: bookingParams.context?.conversationSummary || 'Agendamento via IA'
    }
  }
}

/**
 * Cria notifica√ß√£o para agendamento feito pela IA
 */
export function createAIBookingNotification(bookingData: AIBookingData) {
  const { addAIBookingNotification, addNotification } = useNotificationsStore.getState()
  
  // Notifica√ß√£o principal de agendamento
  addAIBookingNotification({
    patientName: bookingData.patientName,
    doctorName: bookingData.doctorName,
    scheduledAt: bookingData.scheduledAt,
    appointmentId: bookingData.appointmentId,
    chatId: bookingData.chatId
  })
  
  // Se urg√™ncia alta, criar notifica√ß√£o adicional
  if (bookingData.context.urgency === 'high' || bookingData.context.urgency === 'urgent') {
    addNotification({
      type: 'urgent',
      title: 'üö® Agendamento Urgente pela IA',
      message: `IA identificou urg√™ncia alta para ${bookingData.patientName}. Consulta agendada para ${bookingData.scheduledAt}`,
      priority: 'urgent',
      metadata: {
        appointmentId: bookingData.appointmentId,
        patientName: bookingData.patientName,
        doctorName: bookingData.doctorName,
        scheduledAt: bookingData.scheduledAt,
        aiGenerated: true,
        source: 'ai_chat'
      }
    })
  }
}

/**
 * Hook para demonstra√ß√£o de agendamentos da IA
 * Usa dados gen√©ricos para demonstra√ß√£o at√© integra√ß√£o real ser implementada
 */
export function useAIBookingSimulation() {
  const simulateBooking = () => {
    // Generate future date for demo (next 1-3 days)
    const futureDate = new Date()
    futureDate.setDate(futureDate.getDate() + Math.floor(Math.random() * 3) + 1)
    futureDate.setHours(8 + Math.floor(Math.random() * 9), Math.random() < 0.5 ? 0 : 30, 0, 0)
    
    const bookingData = createAIBookingFromRealData({
      patientName: 'Usu√°rio Demo',
      patientEmail: 'demo@email.com',
      doctorName: 'Dr. Sistema',
      doctorId: 'demo_doctor',
      specialtyName: 'Consulta Demo',
      scheduledAt: futureDate.toISOString(),
      confidence: 0.95,
      context: {
        symptoms: ['Consulta de demonstra√ß√£o'],
        urgency: 'medium',
        patientPreferences: ['Agendamento via IA'],
        conversationSummary: 'Demonstra√ß√£o do sistema de agendamento autom√°tico via IA'
      }
    })
    
    createAIBookingNotification(bookingData)
    return bookingData
  }
  
  return { simulateBooking }
}

/**
 * DOCUMENTA√á√ÉO: TIPOS DE NOTIFICA√á√ïES FUTURAS
 * 
 * Quando a automa√ß√£o com IA for implementada na pr√≥xima semana,
 * o sistema suportar√° os seguintes tipos de notifica√ß√µes:
 */

export const FUTURE_NOTIFICATION_TYPES = {
  // ü§ñ AGENDAMENTOS VIA IA
  AI_BOOKING_SUCCESS: {
    type: 'ai_booking',
    title: 'ü§ñ IA Agendou Consulta',
    description: 'IA identificou necessidade e agendou automaticamente',
    priority: 'high',
    triggers: ['chat_completion', 'symptom_analysis', 'urgent_case']
  },
  
  AI_BOOKING_CONFIRMATION_NEEDED: {
    type: 'ai_booking',
    title: 'ü§î IA Precisa de Confirma√ß√£o',
    description: 'IA sugeriu agendamento mas precisa de aprova√ß√£o humana',
    priority: 'medium',
    triggers: ['low_confidence', 'complex_case', 'multiple_options']
  },
  
  AI_RESCHEDULE_SUGGESTION: {
    type: 'ai_booking',
    title: 'üìÖ IA Sugere Reagendamento',
    description: 'IA detectou conflito e sugere nova data/hora',
    priority: 'medium',
    triggers: ['conflict_detected', 'better_slot_available']
  },
  
  // üß† AN√ÅLISES INTELIGENTES
  AI_SYMPTOM_ANALYSIS: {
    type: 'system',
    title: 'üîç An√°lise de Sintomas Conclu√≠da',
    description: 'IA analisou sintomas e sugeriu especialidade',
    priority: 'medium',
    triggers: ['symptom_input', 'chat_analysis']
  },
  
  AI_URGENT_CASE_DETECTED: {
    type: 'urgent',
    title: 'üö® Caso Urgente Identificado',
    description: 'IA detectou sintomas que requerem aten√ß√£o imediata',
    priority: 'urgent',
    triggers: ['red_flag_symptoms', 'emergency_keywords']
  },
  
  AI_FOLLOW_UP_REMINDER: {
    type: 'reminder',
    title: 'üîÑ IA Sugere Retorno',
    description: 'IA recomenda consulta de acompanhamento',
    priority: 'medium',
    triggers: ['treatment_timeline', 'recovery_tracking']
  },
  
  // üìä OTIMIZA√á√ïES AUTOM√ÅTICAS
  AI_SCHEDULE_OPTIMIZATION: {
    type: 'system',
    title: '‚ö° Agenda Otimizada pela IA',
    description: 'IA reorganizou agenda para melhor efici√™ncia',
    priority: 'low',
    triggers: ['schedule_gaps', 'optimization_opportunity']
  },
  
  AI_PATIENT_NO_SHOW_PREDICTION: {
    type: 'reminder',
    title: '‚ö†Ô∏è IA Prev√™ Poss√≠vel Falta',
    description: 'IA sugere contato preventivo com paciente',
    priority: 'medium',
    triggers: ['behavioral_pattern', 'risk_analysis']
  },
  
  // üí¨ INTERA√á√ïES DE CHAT
  AI_CHAT_ESCALATION: {
    type: 'system',
    title: 'üìû Chat Escalado para Humano',
    description: 'IA transferiu conversa para atendimento humano',
    priority: 'high',
    triggers: ['complex_query', 'patient_request', 'ai_limitation']
  },
  
  AI_SATISFACTION_LOW: {
    type: 'system',
    title: 'üòû Satisfa√ß√£o Baixa Detectada',
    description: 'IA detectou insatisfa√ß√£o do paciente no chat',
    priority: 'high',
    triggers: ['negative_sentiment', 'complaint_detected']
  }
} as const

/**
 * FLUXO DE INTEGRA√á√ÉO PLANEJADO:
 * 
 * 1. üì± Paciente inicia chat com IA
 * 2. üß† IA analisa sintomas e necessidades
 * 3. üîç IA consulta disponibilidade de m√©dicos
 * 4. üìÖ IA prop√µe hor√°rios compat√≠veis
 * 5. ‚úÖ IA confirma agendamento automaticamente
 * 6. üîî Sistema cria notifica√ß√µes relevantes
 * 7. üìß IA envia confirma√ß√£o por email/SMS
 * 8. üìä Sistema atualiza m√©tricas e relat√≥rios
 * 
 * TRIGGERS PARA NOTIFICA√á√ïES:
 * - Agendamento realizado com sucesso
 * - Necessidade de confirma√ß√£o humana
 * - Casos urgentes detectados
 * - Otimiza√ß√µes de agenda
 * - Escala√ß√µes para atendimento humano
 * - Feedback negativo do paciente
 */