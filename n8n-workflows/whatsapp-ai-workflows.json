{
  "workflows": [
    {
      "name": "WhatsApp AI - Message Processor",
      "active": true,
      "nodes": [
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "whatsapp-incoming",
            "responseMode": "onReceived",
            "responseCode": 200,
            "responseData": "allEntries"
          },
          "name": "Webhook WhatsApp",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [240, 300]
        },
        {
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "phone_number",
                  "value": "={{ $json.entry && $json.entry[0] && $json.entry[0].changes && $json.entry[0].changes[0] && $json.entry[0].changes[0].value && $json.entry[0].changes[0].value.contacts && $json.entry[0].changes[0].value.contacts[0] ? $json.entry[0].changes[0].value.contacts[0].wa_id : 'unknown' }}"
                },
                {
                  "name": "message_text",
                  "value": "={{ $json.entry && $json.entry[0] && $json.entry[0].changes && $json.entry[0].changes[0] && $json.entry[0].changes[0].value && $json.entry[0].changes[0].value.messages && $json.entry[0].changes[0].value.messages[0] && $json.entry[0].changes[0].value.messages[0].text ? $json.entry[0].changes[0].value.messages[0].text.body : '' }}"
                },
                {
                  "name": "message_type",
                  "value": "={{ $json.entry && $json.entry[0] && $json.entry[0].changes && $json.entry[0].changes[0] && $json.entry[0].changes[0].value && $json.entry[0].changes[0].value.messages && $json.entry[0].changes[0].value.messages[0] ? $json.entry[0].changes[0].value.messages[0].type : 'unknown' }}"
                },
                {
                  "name": "timestamp",
                  "value": "={{ new Date().toISOString() }}"
                }
              ]
            }
          },
          "name": "Extract Message Data",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [460, 300]
        },
        {
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $json.message_text }}",
                  "operation": "isNotEmpty"
                }
              ]
            }
          },
          "name": "Check Valid Message",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [680, 300]
        },
        {
          "parameters": {
            "url": "http://host.docker.internal:3000/api/v1/ai/process-message",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Authorization",
                  "value": "Bearer {{ $node['Get Auth Token'].json['token'] }}"
                }
              ]
            },
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "phone_number",
                  "value": "={{ $json.phone_number }}"
                },
                {
                  "name": "message",
                  "value": "={{ $json.message_text }}"
                },
                {
                  "name": "message_type",
                  "value": "={{ $json.message_type }}"
                },
                {
                  "name": "source",
                  "value": "whatsapp_n8n"
                }
              ]
            }
          },
          "name": "Process with EO Cl√≠nica AI",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [900, 200]
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "INSERT INTO whatsapp_messages (phone_number, message_text, message_type, direction, processed_at, ai_response) VALUES ('{{ $json.phone_number }}', '{{ $json.message_text }}', '{{ $json.message_type }}', 'incoming', NOW(), '{{ $node['Process with EO Cl√≠nica AI'].json['response'] }}') RETURNING id;"
          },
          "name": "Log Message to DB",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [1120, 300],
          "credentials": {
            "postgres": {
              "id": "eo_clinica_postgres",
              "name": "EO Cl√≠nica PostgreSQL"
            }
          }
        }
      ],
      "connections": {
        "Webhook WhatsApp": {
          "main": [[{"node": "Extract Message Data", "type": "main", "index": 0}]]
        },
        "Extract Message Data": {
          "main": [[{"node": "Check Valid Message", "type": "main", "index": 0}]]
        },
        "Check Valid Message": {
          "main": [
            [{"node": "Process with EO Cl√≠nica AI", "type": "main", "index": 0}],
            []
          ]
        },
        "Process with EO Cl√≠nica AI": {
          "main": [[{"node": "Log Message to DB", "type": "main", "index": 0}]]
        }
      }
    },
    {
      "name": "WhatsApp AI - Appointment Scheduler",
      "active": true,
      "nodes": [
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "schedule-appointment",
            "responseMode": "onReceived"
          },
          "name": "Webhook Schedule Request",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [240, 300]
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "SELECT d.id, u.name, s.name as specialty, s.price, s.duration FROM doctors d JOIN users u ON d.user_id = u.id JOIN specialties s ON d.specialty_id = s.id WHERE u.active = true AND s.name ILIKE '%{{ $json.specialty }}%' ORDER BY u.name LIMIT 5;"
          },
          "name": "Find Available Doctors",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [460, 300],
          "credentials": {
            "postgres": {
              "id": "eo_clinica_postgres",
              "name": "EO Cl√≠nica PostgreSQL"
            }
          }
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "SELECT appointment_date FROM appointments WHERE doctor_id = {{ $json.doctor_id }} AND appointment_date::date = '{{ $json.requested_date }}'::date AND status IN ('SCHEDULED', 'CONFIRMED') ORDER BY appointment_date;"
          },
          "name": "Check Doctor Schedule",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [680, 300],
          "credentials": {
            "postgres": {
              "id": "eo_clinica_postgres",
              "name": "EO Cl√≠nica PostgreSQL"
            }
          }
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "INSERT INTO users (name, phone, email, role, created_at) VALUES ('{{ $json.patient_name }}', '{{ $json.phone_number }}', '{{ $json.email || $json.phone_number + '@whatsapp.temp' }}', 'PATIENT', NOW()) ON CONFLICT (phone) DO UPDATE SET name = EXCLUDED.name, email = EXCLUDED.email RETURNING id;"
          },
          "name": "Find or Create Patient",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [900, 200],
          "credentials": {
            "postgres": {
              "id": "eo_clinica_postgres",
              "name": "EO Cl√≠nica PostgreSQL"
            }
          }
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "INSERT INTO appointments (patient_id, doctor_id, appointment_date, status, notes, created_at) VALUES ({{ $json.patient_id }}, {{ $json.doctor_id }}, '{{ $json.appointment_datetime }}', 'SCHEDULED', 'Agendado via WhatsApp AI - N8N', NOW()) RETURNING id, appointment_date;"
          },
          "name": "Create Appointment",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [1120, 300],
          "credentials": {
            "postgres": {
              "id": "eo_clinica_postgres",
              "name": "EO Cl√≠nica PostgreSQL"
            }
          }
        },
        {
          "parameters": {
            "url": "http://host.docker.internal:3000/api/v1/webhooks/whatsapp",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "to",
                  "value": "{{ $json.phone_number }}"
                },
                {
                  "name": "message",
                  "value": "‚úÖ Consulta agendada com sucesso!\\n\\nüìÖ Data: {{ $json.appointment_date }}\\nüë®‚Äç‚öïÔ∏è M√©dico: {{ $json.doctor_name }}\\nüè• Especialidade: {{ $json.specialty }}\\n\\nüìã Detalhes enviados por SMS/email.\\n\\nObrigado por escolher a EO Cl√≠nica! üè•"
                }
              ]
            }
          },
          "name": "Send Confirmation WhatsApp",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [1340, 300]
        }
      ],
      "connections": {
        "Webhook Schedule Request": {
          "main": [[{"node": "Find Available Doctors", "type": "main", "index": 0}]]
        },
        "Find Available Doctors": {
          "main": [[{"node": "Check Doctor Schedule", "type": "main", "index": 0}]]
        },
        "Check Doctor Schedule": {
          "main": [[{"node": "Find or Create Patient", "type": "main", "index": 0}]]
        },
        "Find or Create Patient": {
          "main": [[{"node": "Create Appointment", "type": "main", "index": 0}]]
        },
        "Create Appointment": {
          "main": [[{"node": "Send Confirmation WhatsApp", "type": "main", "index": 0}]]
        }
      }
    },
    {
      "name": "WhatsApp AI - Emergency Escalation",
      "active": true,
      "nodes": [
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "emergency-detected",
            "responseMode": "onReceived"
          },
          "name": "Webhook Emergency",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [240, 300]
        },
        {
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "urgency_level",
                  "value": "={{ $json.urgency_level || 'HIGH' }}"
                },
                {
                  "name": "detected_keywords",
                  "value": "={{ $json.keywords ? $json.keywords.join(', ') : 'emergency detected' }}"
                },
                {
                  "name": "escalation_time",
                  "value": "={{ new Date().toISOString() }}"
                }
              ]
            }
          },
          "name": "Process Emergency Data",
          "type": "n8n-nodes-base.set",
          "typeVersion": 1,
          "position": [460, 300]
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "INSERT INTO emergency_logs (phone_number, message_text, urgency_level, detected_keywords, escalated_at, status) VALUES ('{{ $json.phone_number }}', '{{ $json.message }}', '{{ $json.urgency_level }}', '{{ $json.detected_keywords }}', NOW(), 'ESCALATED') RETURNING id;"
          },
          "name": "Log Emergency",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [680, 300],
          "credentials": {
            "postgres": {
              "id": "eo_clinica_postgres",
              "name": "EO Cl√≠nica PostgreSQL"
            }
          }
        },
        {
          "parameters": {
            "operation": "executeQuery",
            "query": "SELECT u.name, u.phone, u.email FROM users u JOIN doctors d ON u.id = d.user_id WHERE u.active = true AND u.role = 'DOCTOR' AND d.on_call = true ORDER BY d.priority DESC LIMIT 3;"
          },
          "name": "Find On-Call Doctors",
          "type": "n8n-nodes-base.postgres",
          "typeVersion": 1,
          "position": [900, 300],
          "credentials": {
            "postgres": {
              "id": "eo_clinica_postgres",
              "name": "EO Cl√≠nica PostgreSQL"
            }
          }
        },
        {
          "parameters": {
            "url": "http://host.docker.internal:3000/api/v1/notifications/emergency",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Authorization",
                  "value": "Bearer {{ $node['Get Auth Token'].json['token'] }}"
                }
              ]
            },
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "emergency_type",
                  "value": "whatsapp_escalation"
                },
                {
                  "name": "patient_phone",
                  "value": "{{ $json.phone_number }}"
                },
                {
                  "name": "urgency_level",
                  "value": "{{ $json.urgency_level }}"
                },
                {
                  "name": "message",
                  "value": "üö® EMERG√äNCIA VIA WHATSAPP\\n\\nPaciente: {{ $json.phone_number }}\\nN√≠vel: {{ $json.urgency_level }}\\nPalavras-chave: {{ $json.detected_keywords }}\\n\\nMensagem original: {{ $json.message }}"
                },
                {
                  "name": "doctors",
                  "value": "={{ $json }}"
                }
              ]
            }
          },
          "name": "Notify Medical Team",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [1120, 300]
        },
        {
          "parameters": {
            "url": "http://host.docker.internal:3000/api/v1/webhooks/whatsapp",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "to",
                  "value": "{{ $json.phone_number }}"
                },
                {
                  "name": "message",
                  "value": "üö® EMERG√äNCIA DETECTADA üö®\\n\\nSua mensagem foi identificada como urgente e nossa equipe m√©dica foi notificada imediatamente.\\n\\nüè• Um profissional entrar√° em contato em poucos minutos.\\n\\nüìû Para emerg√™ncias graves, ligue tamb√©m para 192 (SAMU).\\n\\nEO Cl√≠nica - Cuidamos de voc√™! ‚ù§Ô∏è"
                }
              ]
            }
          },
          "name": "Send Emergency Response",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 1,
          "position": [1340, 300]
        }
      ],
      "connections": {
        "Webhook Emergency": {
          "main": [[{"node": "Process Emergency Data", "type": "main", "index": 0}]]
        },
        "Process Emergency Data": {
          "main": [[{"node": "Log Emergency", "type": "main", "index": 0}]]
        },
        "Log Emergency": {
          "main": [[{"node": "Find On-Call Doctors", "type": "main", "index": 0}]]
        },
        "Find On-Call Doctors": {
          "main": [[{"node": "Notify Medical Team", "type": "main", "index": 0}]]
        },
        "Notify Medical Team": {
          "main": [[{"node": "Send Emergency Response", "type": "main", "index": 0}]]
        }
      }
    }
  ],
  "credentials": [
    {
      "id": "eo_clinica_postgres",
      "name": "EO Cl√≠nica PostgreSQL",
      "type": "postgres",
      "data": {
        "host": "postgres",
        "port": 5432,
        "database": "eo_clinica_db",
        "user": "clinic_user",
        "password": "clinic_password",
        "ssl": "disable"
      }
    }
  ]
}