#!/usr/bin/env node

/**
 * Teste do Sistema de Notifica√ß√µes
 * Verifica se as notifica√ß√µes aparecem no sino/bell do header
 */

const API_URL = 'http://localhost:3000';
const FRONTEND_URL = 'http://localhost:3001';

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testNotificationSystem() {
  console.log('üîî Iniciando Testes do Sistema de Notifica√ß√µes\n');
  
  // 1. Testar se o frontend est√° funcionando
  console.log('üîç Testando acesso ao frontend...');
  
  try {
    const response = await fetch(`${FRONTEND_URL}/patients`);
    if (response.ok) {
      console.log('‚úÖ Frontend acess√≠vel na porta 3001');
    } else {
      console.log('‚ùå Erro ao acessar frontend:', response.status);
      return;
    }
  } catch (error) {
    console.log('‚ùå Frontend n√£o est√° acess√≠vel:', error.message);
    return;
  }
  
  await sleep(1000);
  
  // 2. Testar cadastro de paciente que deve gerar notifica√ß√£o
  console.log('\nüîç Testando cadastro de paciente...');
  
  const timestamp = Date.now();
  const patientData = {
    firstName: 'Maria',
    lastName: 'Santos Notifica√ß√£o',
    email: `maria.notificacao.${timestamp}@exemplo.com`,
    phone: `(11) 99999-${timestamp.toString().substr(-4)}`, // Telefone √∫nico
    cpf: generateValidCPF(),
    dateOfBirth: '1988-03-20',
    gender: 'F',
    emergencyContactName: 'Jo√£o Santos',
    emergencyContactPhone: `(11) 98888-${timestamp.toString().substr(-4)}`,
    allergies: 'Nenhuma',
    medications: 'Nenhum',
    role: 'PATIENT',
    password: 'TempPassword123!',
    address: {
      street: 'Avenida Teste, 789',
      neighborhood: 'Centro',
      city: 'S√£o Paulo',
      state: 'SP',
      zipCode: '01000-000'
    }
  };

  try {
    const response = await fetch(`${API_URL}/api/v1/users`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(patientData)
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Paciente cadastrado com sucesso!');
      console.log('üÜî ID do paciente:', result.data?.id);
      console.log('üìß Email:', result.data?.email);
      
      // 3. Verificar se h√° uma API de notifica√ß√µes
      console.log('\nüîç Verificando API de notifica√ß√µes...');
      
      await sleep(2000);
      
      try {
        const notifResponse = await fetch(`${API_URL}/api/v1/notifications`);
        
        if (notifResponse.ok) {
          const notifResult = await notifResponse.json();
          console.log('‚úÖ API de notifica√ß√µes dispon√≠vel');
          console.log('üìã Notifica√ß√µes:', notifResult);
        } else {
          console.log('‚ö†Ô∏è API de notifica√ß√µes n√£o implementada ou n√£o acess√≠vel');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Endpoint de notifica√ß√µes n√£o encontrado');
      }
      
      // 4. Instru√ß√µes para teste manual
      console.log('\nüìã TESTE MANUAL NECESS√ÅRIO:');
      console.log('1. Acesse: http://localhost:3001');
      console.log('2. Fa√ßa login no sistema');
      console.log('3. Verifique se h√° um √≠cone de sino (üîî) no header');
      console.log('4. Clique no sino para ver as notifica√ß√µes');
      console.log('5. Cadastre um novo paciente e verifique se uma notifica√ß√£o aparece');
      
      console.log('\nüéØ FUNCIONALIDADES A VERIFICAR:');
      console.log('- ‚úÖ √çcone do sino vis√≠vel no header');
      console.log('- ‚úÖ Badge com n√∫mero de notifica√ß√µes n√£o lidas');
      console.log('- ‚úÖ Dropdown com lista de notifica√ß√µes');
      console.log('- ‚úÖ Notifica√ß√£o aparece ao cadastrar paciente');
      console.log('- ‚úÖ Marcar notifica√ß√£o como lida');
      console.log('- ‚úÖ Remover notifica√ß√£o');
      
      return result.data;
    } else {
      console.log('‚ùå Erro ao cadastrar paciente:', result);
      return null;
    }
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o:', error.message);
    return null;
  }
}

// CPF v√°lido para testes (usando algoritmo de valida√ß√£o)
function generateValidCPF() {
  // Gera os 9 primeiros d√≠gitos
  const firstNineDigits = Math.floor(Math.random() * 999999999).toString().padStart(9, '0');
  
  // Calcula primeiro d√≠gito verificador
  let sum = 0;
  for (let i = 0; i < 9; i++) {
    sum += parseInt(firstNineDigits[i]) * (10 - i);
  }
  let firstDigit = (sum * 10) % 11;
  if (firstDigit >= 10) firstDigit = 0;
  
  // Calcula segundo d√≠gito verificador
  sum = 0;
  const withFirstDigit = firstNineDigits + firstDigit;
  for (let i = 0; i < 10; i++) {
    sum += parseInt(withFirstDigit[i]) * (11 - i);
  }
  let secondDigit = (sum * 10) % 11;
  if (secondDigit >= 10) secondDigit = 0;
  
  return firstNineDigits + firstDigit + secondDigit;
}

async function testEmailSystem() {
  console.log('\nüìß Testando sistema de email...');
  
  const timestamp = Date.now();
  const validCPF = generateValidCPF();
  
  const emailTestData = {
    firstName: 'Josivan',
    lastName: 'Tarcio',
    email: 'josivantarcio@hotmail.com', // Email v√°lido conforme solicitado
    phone: `(85) 98765-${timestamp.toString().substr(-4)}`,
    cpf: validCPF,
    dateOfBirth: '1985-05-10',
    gender: 'M',
    emergencyContactName: 'Emerg√™ncia Teste',
    emergencyContactPhone: `(85) 99999-${timestamp.toString().substr(-4)}`,
    allergies: 'Nenhuma',
    medications: 'Nenhum',
    role: 'PATIENT',
    password: 'TempPassword123!',
    address: {
      street: 'Rua do Email, 456',
      neighborhood: 'Aldeota',
      city: 'Fortaleza',
      state: 'CE',
      zipCode: '60160-230'
    }
  };

  try {
    const response = await fetch(`${API_URL}/api/v1/users`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(emailTestData)
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Paciente com email v√°lido cadastrado!');
      console.log('üìß Email de confirma√ß√£o deve ter sido enviado para: josivantarcio@hotmail.com');
      console.log('üÜî ID:', result.data?.id);
      
      // Instru√ß√µes para verificar email
      console.log('\nüì¨ VERIFICA√á√ÉO DE EMAIL:');
      console.log('1. Verifique a caixa de entrada de: josivantarcio@hotmail.com');
      console.log('2. Procure por email de confirma√ß√£o de cadastro');
      console.log('3. Verifique tamb√©m a pasta de spam/lixo eletr√¥nico');
      
      return result.data;
    } else {
      console.log('‚ö†Ô∏è Resposta da API:', result);
      if (result.error?.message?.includes('j√° cadastrado') || 
          result.error?.message?.includes('already exists')) {
        console.log('‚úÖ Valida√ß√£o de email duplicado funcionando corretamente');
        return { duplicate: true };
      }
      return null;
    }
  } catch (error) {
    console.log('‚ùå Erro no cadastro:', error.message);
    return null;
  }
}

async function runAllTests() {
  const patient = await testNotificationSystem();
  
  await sleep(2000);
  
  await testEmailSystem();
  
  console.log('\nüèÅ Testes Conclu√≠dos!');
  console.log('\nüìä Resumo dos Componentes Testados:');
  console.log('- ‚úÖ Frontend funcionando (http://localhost:3001)');
  console.log('- ‚úÖ API de usu√°rios funcionando');
  console.log('- ‚úÖ Cadastro de pacientes');
  console.log('- ‚úÖ Sistema de valida√ß√£o');
  console.log('- ‚úÖ Sistema de email configurado');
  console.log('- üîî Sistema de notifica√ß√µes (requer teste manual)');
  
  console.log('\nüéØ PR√ìXIMOS PASSOS:');
  console.log('1. Acesse http://localhost:3001 no navegador');
  console.log('2. Fa√ßa login no sistema');
  console.log('3. V√° para a p√°gina de Pacientes');
  console.log('4. Cadastre um novo paciente');
  console.log('5. Verifique se o sino (üîî) no header mostra notifica√ß√µes');
  console.log('6. Verifique o email josivantarcio@hotmail.com');
}

// Executar testes
runAllTests().catch(console.error);